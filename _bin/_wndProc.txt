				case WM.ACTIVATE:
					{
						var wlParam = new Win32Param()
						{
							BaseValue = (uint)wParam
						};

						var waStatus = (WindowActivateFlag)wlParam.LOWord;

						switch (waStatus)
						{
							case WindowActivateFlag.WA_INACTIVE:
								User32Methods.SetActiveWindow(_wndHandle);
								User32Methods.SetForegroundWindow(_wndHandle);
								SetShellVisualAsActive();
								break;
						}
					}
					break;

				//case WM.ACTIVATEAPP:
				//	{
				//		var activated = wParam.ToInt32().ChangeType<bool>();

				//		if (!activated && (_wndHandle != _shellWindowHandle))
				//		{
				//			User32Methods.SetActiveWindow(_wndHandle);
				//			User32Methods.SetForegroundWindow(_wndHandle);
				//			SetShellVisualAsActive();
				//		}
				//	}
				//	break;

using Shared.Kernel;
using System;
using System.Collections.Generic;
using System.Windows.Interop;
using WinApi.User32;

namespace UI.Wpf.Shell
{
	public class ShellWndProc
	{
		private IntPtr _shellWindowHandle;
		private WndTracker _wndHandleTracker;

		public ShellWndProc(HwndSource shellHwndSource)
		{
			shellHwndSource.AddHook(WndProc);
			_shellWindowHandle = shellHwndSource.Handle;

			_wndHandleTracker = new WndTracker();
		}

		internal void RestoreLastActiveWindow() => ActivateWindow();

		private void ActivateWindow()
		{
			var activeHandle = _wndHandleTracker.GetLastActiveHadnle();

			User32Methods.SetActiveWindow(_shellWindowHandle);
			User32Methods.SetForegroundWindow(_shellWindowHandle);
			User32Methods.SetForegroundWindow(activeHandle);

			SetShellVisualAsActive();
		}

		/// <summary>
		/// Force the shell view to be displayed as active.
		/// </summary>
		private void SetShellVisualAsActive() => Win32Api.SetVisualAsActive(_shellWindowHandle);

		private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
		{
			var message = (WM)msg;

			switch (message)
			{
				case WM.ACTIVATEAPP:
					{
						//var activated = wParam.ToInt32().ChangeType<bool>();

						//if (hwnd == _shellWindowHandle && !activated)
						//{
						//	SetShellVisualAsActive();
						//	handled = true;
						//}
					}
					break;

				case WM.MOUSEACTIVATE:
					{
						//handled = true;
						//SetShellVisualAsActive();
						//return new IntPtr((int)MouseActivationResult.MA_NOACTIVATE);
					}
					break;

				case WM.SETCURSOR:
					{
						var wlParam = new Win32Param()
						{
							BaseValue = (uint)lParam
						};

						var wMouseMsg = (WM)wlParam.HOWord;

						switch (wMouseMsg)
						{
							case WM.LBUTTONDOWN:
							case WM.RBUTTONDOWN:
							case WM.MBUTTONDOWN:
								{
									_wndHandleTracker.Track(wParam);

									if (wParam != _shellWindowHandle)
									{
										ActivateWindow();
									}

									//if (wParam != _shellWindowHandle)
									//{
									//	_lastForegroundWindow = wParam;
									//	ActivateChildWindow();
									//}
									//else
									//{
									//	_lastForegroundWindow = IntPtr.Zero;
									//	ActivateShellWindow();
									//}
								}
								break;
						}
					}
					break;

				//case WM.SYSCOMMAND:
				//	{
				//		var uCmdType = (SysCommand)wParam;

				//		switch (uCmdType)
				//		{
				//			case SysCommand.SC_MINIMIZE:
				//			case SysCommand.SC_MAXIMIZE:
				//			case SysCommand.SC_RESTORE:
				//				{
				//					// Window commands will cause the shell view handle to be tracked
				//					// causing the actual lates handle being tracked to be lost and removing
				//					// it here fixes this problem as window messages do not direclty report console handlers.
				//					_wndHandleTracker.DiscardLatest();
				//				}
				//				break;
				//		}
				//	}
				//	break;
			}

			return IntPtr.Zero;
		}
	}
}
